Practical Golang
Golang quick intro
25 Jul 2018

Mihael Dimec
miha.dimec@visionect.com
@mihad

* Workspace and Packages

* Setup workspace and `$GOPATH`
- Go programmers typically keep all their Go code in a single workspace.
- A workspace contains many version control repositories (managed by Git, for example).
- Each repository contains one or more packages.
- Each package consists of one or more Go source files in a single directory.
- The path to a package's directory determines its import path.
- `$GOPATH` environment variable specifies the location of your workspace
- It is convenient to set `$GOPATH` in your `bashrc` or/and `profile` or in similar shell startup script.

* Workspace directory structure

A workspace is a directory hierarchy with three directories at its root: 

- `src` contains Go source files,
- `pkg` contains package objects, and 
- `bin` contains executable commands. 

What is the purpose:

- The `go` tool builds source packages and installs the resulting binaries to the `pkg` and `bin` directories.

- The `src` subdirectory typically contains multiple version control repositories (such as for Git or Mercurial) that track the development of one or more source packages. 

- It is convenient to add this location to your `$PATH`)

  export GOPATH=$(go env GOPATH)

* Workspace directory structure
  $GOPATH
  |--bin/
  |  |--hello                       # command executable
  |  |--outyet                      # command executable
  |--pkg/
  |  |--linux_amd64/
  |     |--github.com/golang/example/
  |                          |--stringutil.a # package object
  |--src/
     |--github.com/golang/example/  # If package is in source repository (GitHub), it is common to
     |                    |         # use the root of that source repository as your base path!
     |                    |--.git/              # Git repository metadata
     |                    |--hello/
     |                    |  |--hello.go        # command source
     |                    |--outyet/
     |                    |  |--main.go         # command source
     |                    |  |--main_test.go    # test source
     |                    |--stringutil/
     |                    |  |--reverse.go      # package source
     |                    |  |--reverse_test.go # test source
     |--golang.org/x/image/      
     |               |--.git/          # Git repository metadata
     |               |--bmp/
     |                  |--reader.go   # package source
     |                  |--writer.go   # package source

* Packages and Imports

- Every Go program is made up of packages
- Programs start running in package main. 

.play packages.go

- This program is using the packages (standard library) with import paths `"fmt"` and `"math/rand"`.
- By convention, the package name is the same as the last element of the import path. For instance, the `"math/rand"` package comprises files that begin with the statement: *package* *rand* 

* How to get a package you need from GitHub or other repositories 

  go get [-d] [-f] [-fix] [-insecure] [-t] [-u] [-v] [build flags] [packages]

- Get downloads the packages named by the import paths, along with their dependencies. It then installs the named packages, like *go* *install*.

- get package from GitHub

  go get github.com/mdimec4/allrecipes
- use this package

.code recipes.go

* Go advanced dependency manager

- For bigger projects you really need dependency manager

- We use Dep
.link https://github.com/golang/dep 

* Methodes and Interfaces

* Methodes

A method is a function with special receiver argument

.play methods.go

* Methodes - pointer receiver

- Methods with pointer receivers can modify the value to which the receiver points.

.play methods-pointers.go

- The second reason why you want to use pointer receiver is that this way you avoid copying the value on each function call. This can be more efficient if the receiver is a large struct, for example.

* Interfaces

- An interface type is defined as a set of method signatures. 
- A value of interface type can hold any value that implements those methods.
- Interfaces are used a lot in Golang standard library.
- Useful for mocking in Unit Tests
- Code generalization (Go doesn't support generics)

* Interfaces - Example

- `Abser` interface
.code interfaces.go /START ABSER OMIT/,/END ABSER OMIT/
- `Vertex` and `MyFloat` both implement `Abser`
.code interfaces.go /START VERTEX OMIT/,/END VERTEX OMIT
.code interfaces.go /START MYFLOAT OMIT/,/END MYFLOAT OMIT

* Interfaces - Example(2)
.play interfaces.go /START MAIN OMIT/,/END MAIN OMIT/


* Interfaces are implemented implicitly

- A type implements an interface by implementing its methods. There is no explicit declaration of intent, no "implements" keyword. 

- Implicit interfaces decouple the definition of an interface from its implementation, which could then appear in any package without prearrangement. 

- For example one frequently-used interface is `Writer`, specified by `io` package:

  type Writer interface {
    Write(p []byte) (n int, err error)
  }

- Many types, from both the standard library and other Go code, implement the Write method described above, and can thus be used anywhere an `io.Writer` is expected. 

- This means that if type defined by you implements `io.Write` method, it can be used by all this existing code. 

* Be careful with nil underling values

- An interface value holds a value of a specific underlying concrete type. 
- Under the covers, interface can be thought as a tuple of value and a concrete type:

  (value, type)

* Be careful with nil underling values(2)

.play interfaces-nil.go /START OMIT/,/END OMIT/

* Be careful with nil underling values(3)

This is ugly part of Go and there is no pretty solution to this.

- If you know which types to expect in advance, you can assert them.

  if i.(*int) == nil {
  }

or

  switch v := i.(type) {
  case *int:
    if v == nil {
    }
  case *float:
    if v == nil {
    }
  }

- More general and uglier solution, where you don't need to know type in advance is to use the function: 

  reflect.IsNil() 

* Stringer interface

- One of the most ubiquitous interfaces is `Stringer` defined by the `fmt` package.
- A `Stringer` is a type that can describe itself as a `string`. The `fmt` package (and many others) look for this interface to print values. 

  type Stringer interface {
   String() string
  }

.play stringer.go /START OMIT/,/END OMIT/
- About Workspace and project directory structure
.link https://golang.org/doc/code.html https://golang.org/doc/code


* Error handling

* Error checking

Functions often return an `error` value, and calling code should handle errors by testing whether the error equals `nil`.

  i, err := strconv.Atoi("42")
  if err != nil {
    fmt.Fprintf(os.Stderr, "couldn't convert number: %v\n", err)
    return
  }
  fmt.Println("Converted integer:", i)


* error interface

The `error` type is a built-in interface:

- It is similar to `fmt.Stringer`
- `fmt` package looks for the `error` interface when printing values.

  type error interface{
    Error() string
    }

* error interface (2)

.play errors.go /START OMIT/,/END OMIT/

* Package testing 

* Unit tests

- Test files for package must end with `_test.go`.
- Files named like this are compiled only if tests are run for the package.
- Example package `uuid` has two files
    - uuid.go - package logic
    - uuid_test.go - package unit tests
- Test files must import `testing` package
- Test files must follow this naming format:
  func Testxxx(t *testing.T)
  xxx = stands for test description
   For example func TestFooBar_EmptyString(t testing.T)
   would test
   function FooBar(s string)
   and how it handles empty string for input

* Unit tests - Example

.code factorial.go

* Unit tests - Example

.code factorial_test.go

* Other tests supported by testing package

- Examples

  func ExampleHello() {
    fmt.Println("hello")
    // Output: hello
  }

- Benchmarks

  func BenchmarkHello(b *testing.B) {
      for i := 0; i < b.N; i++ {
          fmt.Sprintf("hello")
      }
  }

Output:

  BenchmarkHello    10000000    282 ns/op

* Unit Tests - mocking

- An object under test may have dependencies on other (complex) objects. To isolate the behavior of the object you want to replace the other objects by mocks that simulate the behavior of the real objects.


- Database would be one such example. We want the production code to communicate with real database, but on the other hand, we want for unit tests to be independent of any external dependencies.

* Unit Tests - mocking (2)

- Method 1 - that works, but is ugly

  type Database struct {
    GetUserCb func(name string) (*User, error)
  }

  func (d Database) GetUser(name string) (*User, error) {
    if d.GetUserCb != nil {
      return d.GetUserCb(name)
    }
    return, nil, errrors.New("database backend method not set")
  }

- Method 2 - the Go way

  type Database interface {
    GetUser(name string) (*User, error)
  }

* Concurrency

* Concurency

_"Concurrency_ _is_ _not_ _a_ _parallelism._ _..._
_Concurrency_ _is_ _about_ *dealing* *with* _lots_ _of_ _things_ _at_ _once.
_Parallelism_ _is_ _about_ *doing* _lots_ _of_ _things_ _at_ _once."_

*Rob* *Pike* - *Concurrency* *is* *not* *Parallelism* - *2013*

- This mean that the real world is *concurrent*, and a lot of things are happening at once. 
- Concurrency is how we deal with this.
- Concurrency can virtually be achieved on one processor with multitasking, but true parallelism can only be achieved with multiple processors.

* Goroutines

- a `goroutine` is lightweight thread managed by Go runtime.
- runtime can multiplex several goroutines on single system thread. Actually runtime usually has a pool of system threads available for this purpose.

  go f(x, y, y) 

- The evaluation of `f`, `x`, `y` and `z` happens on current current goroutine. 
- Execution of `f` happens in the new goroutine.
- Goroutines run in the same address space, so access to shared memory must be synchronized. 

* Goroutines - Example

.play goroutines.go

* Channels

- Channels are a typed conduit through which you can send and receive values with the channel operator, `<-`.

  ch <- v    // Send v to channel ch.
  v := <-ch  // Receive from ch, and
             // assign value to v.

-  Like maps and slices, channels must be created before use:

  ch := make(chan int)

- By default, sends and receives block until the other side is ready. This allows goroutines to synchronize without explicit locks or condition variables. 

* Channels - Example

- The example code sums the numbers in a slice, distributing the work between two goroutines. Once both goroutines have completed their computation, it calculates the final result. 

.play channels.go /START OMIT/,/END OMIT/

* Buffered channels

- Channels can be buffered. Provide the buffer length as the second argument to make to initialize a buffered channel:

  ch := make(chan int, 100)

- Sends to a buffered channel block only when the buffer is full. Receives block when the buffer is empty.

.play buffered-channels.go

* Range and Close

- A sender can `close` a channel to indicate that no more values will be sent.
- Receivers can test whether a channel has been closed by assigning a second parameter to the receive expression

  v, ok := <-ch // ok == false if channel is closed

- *NOTE* Only sender should close the channel
- *NOTE* Channels are not files and it is not mandatory to close them after use.

- Use `range` to loop receive from channel

* Range and Close - Example

.play range-and-close.go

* Select

- The select statement lets a goroutine wait on multiple channels.
- A select blocks until at least one of its cases can run, then it executes that case

.play selection.go

* Default selection

- The `default` case in a select is run if no other case is ready.
- Use a `default` case to try a send or receive without blocking

.play selection-default.go /START OMIT/,/END OMIT/

* sync.Mutex

- Channels are great for communication in between goroutines.
- But sometimes we just want to make sure that only one goroutine at the time can access a variable avoiding conflicts.

* sync.Mutex - Example

.code mutex.go /START OMIT/,/END OMIT/

* sync.Mutex - Example(2)

.play mutex.go /START MAIN OMIT/,/END MAIN OMIT/

* C bindings and cgo

* cgo Example
.play cgo.go



* Sources

- A Tour of Go
.link https://tour.golang.org/welcome/1 https://tour.golang.org/welcome/1
- Go Dep
.link https://github.com/golang/dep https://github.com/golang/dep
- Package testing 
.link https://golang.org/pkg/testing/ https://golang.org/pkg/testing/
- C? Go? Cgo!
.link https://blog.golang.org/c-go-cgo https://blog.golang.org/c-go-cgo
- Command cgo
.link https://golang.org/cmd/cgo/ https://golang.org/cmd/cgo/
